import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
# removed config import to avoid .env RuntimeError
from .keyboards import MAIN_KB, numbers_inline_keyboard, durations_keyboard, RED_CIRCLE, GREEN_CIRCLE, payment_keyboard, promo_choice_keyboard, profile_keyboard, category_keyboard
from . import storage
from .prices import PRICES
from .crypto import CryptoPay
import time

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is not set. Please add it to your environment variables.")

CRYPTO_PAY_TOKEN = os.getenv("CRYPTO_PAY_TOKEN", "")
try:
        ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
except Exception:
        ADMIN_ID = 0

router = Router()

crypto_client = CryptoPay(CRYPTO_PAY_TOKEN) if CRYPTO_PAY_TOKEN else None

# Temporary storage for users waiting to enter promo code
# Format: {user_id: {"number": str, "months": int, "price": float}}
pending_promo_state = {}


def _format_until(until_iso: str) -> str:
        try:
                return datetime.strptime(until_iso, "%Y-%m-%dT%H:%M:%S").strftime("%d.%m.%Y %H:%M UTC")
        except Exception:
                return until_iso


@router.message(CommandStart())
async def start(message: Message):
        # Register user
        username = message.from_user.username
        storage.register_user(message.from_user.id, username)
        
        await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Shadow Numbers!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
                reply_markup=MAIN_KB,
        )


@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_cmd(message: Message):
        text = (
                "Shadow Numbers ‚Äî —Å–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ Telegram.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                f"- –ù–æ–º–µ—Ä–∞: –Ω–∞–≥–ª—è–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ ({RED_CIRCLE} ‚Äî –∑–∞–Ω—è—Ç–æ, {GREEN_CIRCLE} ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ).\n"
		"- –î–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: üì± eSIM ($10-$30/–º–µ—Å) –∏ üìû –§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ ($4-$10/–º–µ—Å).\n"
		"- –ê—Ä–µ–Ω–¥–∞: –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏ ‚Äî 1, 3, 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤.\n"
		"- –¢–∞—Ä–∏—Ñ—ã: –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å = —Ü–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤.\n"
		"- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ä–∞–∑–¥–µ–ª 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' ‚Üí 'üìã –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã' ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.\n"
		"- –û–ø–ª–∞—Ç–∞: –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ USDT —á–µ—Ä–µ–∑ Crypto Pay.\n"
		"- –ü—Ä–æ–º–æ–∫–æ–¥—ã: —Å–∫–∏–¥–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É (–≤–≤–æ–¥—è—Ç—Å—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ).\n\n"
		"–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:\n"
		"1) –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª 'üì± –ù–æ–º–µ—Ä–∞' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n"
		"2) –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä (—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ —Ä—è–¥–æ–º).\n"
		"3) –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n"
		"4) –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç (USDT) –ø–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n"
		"5) –ù–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª' ‚Äî –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É.\n\n"
        )
        await message.answer(text)


@router.message(F.text == "üì± –ù–æ–º–µ—Ä–∞")
async def list_numbers(message: Message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤:", reply_markup=category_keyboard())


@router.callback_query(F.data.startswith("cat:"))
async def select_category(callback: CallbackQuery):
        category = callback.data.split(":", 1)[1]
        numbers = storage.list_numbers(category=category)
        
        category_name = "eSIM" if category == "esim" else "–§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞"
        if not numbers:
                await callback.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤", show_alert=True)
                return
        
        await callback.message.edit_text(
                f"üì± {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:",
                reply_markup=numbers_inline_keyboard(numbers)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("num:"))
async def pick_number(callback: CallbackQuery):
        number = callback.data.split(":", 1)[1]
        item = storage.get_number(number)
        if not item:
                await callback.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
        if item["status"] == "busy":
                await callback.message.edit_text(
                        f"{RED_CIRCLE} {number} ‚Äî –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.",
                        reply_markup=numbers_inline_keyboard(storage.list_numbers()),
                )
                await callback.answer()
                return
        
        monthly_price = item.get("price", 25)
        await callback.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {GREEN_CIRCLE} {number}\n"
                f"–¶–µ–Ω–∞: ${monthly_price}/–º–µ—Å\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:",
                reply_markup=durations_keyboard(number, monthly_price),
        )
        await callback.answer()


@router.callback_query(F.data.startswith("dur:"))
async def rent_duration(callback: CallbackQuery):
        _, months_str, number = callback.data.split(":", 2)
        months = int(months_str)
        
        # Get number info to retrieve individual price
        num_info = storage.get_number(number)
        if not num_info:
                await callback.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
        
        # Calculate price: monthly price * months
        monthly_price = num_info.get("price", PRICES.get(1, 25))
        total_price = monthly_price * months
        
        # Save pending state for promo code entry
        pending_promo_state[callback.from_user.id] = {
                "number": number,
                "months": months,
                "price": total_price,
        }
        
        # Ask for promo code
        await callback.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä {number} –Ω–∞ {months} –º–µ—Å.\n"
                f"–¶–µ–Ω–∞: ${total_price} (${monthly_price}/–º–µ—Å)\n\n"
                "üéÅ –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏?",
                reply_markup=promo_choice_keyboard(),
        )
        await callback.answer()


@router.callback_query(F.data == "enter_promo")
async def enter_promo(callback: CallbackQuery):
        user_id = callback.from_user.id
        if user_id not in pending_promo_state:
                await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                return
        
        state = pending_promo_state[user_id]
        await callback.message.edit_text(
                f"üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:\n\n"
                f"–ù–æ–º–µ—Ä: {state['number']}\n"
                f"–°—Ä–æ–∫: {state['months']} –º–µ—Å\n"
                f"–¶–µ–Ω–∞: ${state['price']}"
        )
        await callback.answer()


@router.callback_query(F.data == "skip_promo")
async def skip_promo(callback: CallbackQuery):
        user_id = callback.from_user.id
        if user_id not in pending_promo_state:
                await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                return
        
        state = pending_promo_state.pop(user_id)
        await process_payment(callback, state["number"], state["months"], state["price"], None, None)


@router.message(F.text)
async def handle_promo_code(message: Message):
        user_id = message.from_user.id
        if user_id not in pending_promo_state:
                return
        
        promo_code = message.text.strip()
        state = pending_promo_state[user_id]
        
        # Validate promo code
        promo = storage.get_promocode(promo_code)
        if not promo:
                await message.answer(
                        f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\".",
                        reply_markup=promo_choice_keyboard(),
                )
                return
        
        # Calculate discount
        original_price = state["price"]
        discount_percent = promo["percent"]
        final_price = max(1, round(original_price * (100 - discount_percent) / 100, 2))
        
        # Remove from pending state
        pending_promo_state.pop(user_id)
        
        await message.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo['code']} –ø—Ä–∏–º–µ–Ω—ë–Ω!\n"
                f"–°–∫–∏–¥–∫–∞: {discount_percent}%\n"
                f"–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: ${original_price}\n"
                f"–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${final_price}\n\n"
                "–°–æ–∑–¥–∞—é —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã..."
        )
        
        await process_payment_from_message(message, state["number"], state["months"], final_price, promo_code, discount_percent)


async def process_payment(callback, number: str, months: int, final_price: float, promo_code: str = None, discount_percent: int = None):
        """Create invoice and process payment from callback with optional promo code."""
        if not crypto_client:
                # Fallback without crypto: instantly rent (dev/test)
                rental = storage.add_rental(callback.from_user.id, number, months)
                if rental is None:
                        await callback.answer("–ù–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)
                        return
                until_h = _format_until(rental["until"])
                msg_text = f"–ì–æ—Ç–æ–≤–æ! {number} –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –¥–æ {until_h}."
                if promo_code:
                        msg_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –ø—Ä–∏–º–µ–Ω—ë–Ω (-{discount_percent}%)!\n\n" + msg_text
                
                await callback.message.edit_text(msg_text)
                await callback.answer()
                return
        
        # Create Crypto Pay invoice
        payment_id = f"{callback.from_user.id}:{number}:{months}:{int(time.time())}"
        description = f"–ê—Ä–µ–Ω–¥–∞ {number} –Ω–∞ {months} –º–µ—Å"
        if promo_code:
                description += f" (–ø—Ä–æ–º–æ–∫–æ–¥ {promo_code})"
        
        invoice = await crypto_client.create_invoice(amount=final_price, asset="USDT", description=description, payload=payment_id)
        if not invoice:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                return
        
        payment_data = {
                "user_id": callback.from_user.id,
                "number": number,
                "months": months,
                "price": final_price,
                "invoice_id": invoice.get("invoice_id"),
                "status": "pending",
        }
        if promo_code:
                payment_data["promo_code"] = promo_code
                payment_data["discount_percent"] = discount_percent
        
        storage.create_pending_payment(payment_id, payment_data)
        pay_url = invoice.get("pay_url") or invoice.get("bot_invoice_url")
        
        msg_text = f"–û–ø–ª–∞—Ç–∏—Ç–µ {final_price}$ USDT –∑–∞ {months} –º–µ—Å –∞—Ä–µ–Ω–¥—ã –Ω–æ–º–µ—Ä–∞ {number}.\n\n"
        if promo_code:
                msg_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –ø—Ä–∏–º–µ–Ω—ë–Ω! –°–∫–∏–¥–∫–∞ {discount_percent}%\n\n" + msg_text
        msg_text += f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {pay_url}\n\n"
        msg_text += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        
        await callback.message.edit_text(msg_text, reply_markup=payment_keyboard(payment_id))
        await callback.answer()


async def process_payment_from_message(message: Message, number: str, months: int, final_price: float, promo_code: str = None, discount_percent: int = None):
        """Create invoice and process payment from user message with promo code."""
        user_id = message.from_user.id
        
        if not crypto_client:
                # Fallback without crypto: instantly rent (dev/test)
                rental = storage.add_rental(user_id, number, months)
                if rental is None:
                        await message.answer("‚ùå –ù–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç")
                        return
                until_h = _format_until(rental["until"])
                msg_text = f"‚úÖ –ì–æ—Ç–æ–≤–æ! {number} –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –¥–æ {until_h}."
                await message.answer(msg_text)
                return
        
        # Create Crypto Pay invoice
        payment_id = f"{user_id}:{number}:{months}:{int(time.time())}"
        description = f"–ê—Ä–µ–Ω–¥–∞ {number} –Ω–∞ {months} –º–µ—Å (–ø—Ä–æ–º–æ–∫–æ–¥ {promo_code})"
        
        invoice = await crypto_client.create_invoice(amount=final_price, asset="USDT", description=description, payload=payment_id)
        if not invoice:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
                return
        
        payment_data = {
                "user_id": user_id,
                "number": number,
                "months": months,
                "price": final_price,
                "invoice_id": invoice.get("invoice_id"),
                "status": "pending",
                "promo_code": promo_code,
                "discount_percent": discount_percent,
        }
        
        storage.create_pending_payment(payment_id, payment_data)
        pay_url = invoice.get("pay_url") or invoice.get("bot_invoice_url")
        
        msg_text = f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {final_price}$ USDT –∑–∞ {months} –º–µ—Å –∞—Ä–µ–Ω–¥—ã –Ω–æ–º–µ—Ä–∞ {number}.\n\n"
        msg_text += f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {pay_url}\n\n"
        msg_text += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        
        await message.answer(msg_text, reply_markup=payment_keyboard(payment_id))


@router.callback_query(F.data.startswith("paid:"))
async def paid_check(callback: CallbackQuery):
        if not crypto_client:
                await callback.answer("–ö—Ä–∏–ø—Ç–æ-–æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)
                return
        payment_id = callback.data.split(":", 1)[1]
        p = storage.get_payment(payment_id)
        if not p or not p.get("invoice_id"):
                await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
        invoice = await crypto_client.get_invoice(int(p["invoice_id"]))
        if not invoice:
                await callback.answer("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
        status = invoice.get("status")
        if status != "paid":
                await callback.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", show_alert=True)
                return
        # Activate rental
        rental = storage.add_rental(callback.from_user.id, p["number"], int(p["months"]))
        if rental is None:
                await callback.answer("–ù–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)
                return
        storage.set_payment_status(payment_id, "paid")
        until_h = _format_until(rental["until"])
        await callback.message.edit_text(
                f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. {p['number']} –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –¥–æ {until_h}.")
        await callback.answer()


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
        user_id = message.from_user.id
        username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # Get or register user
        user_data = storage.get_user(user_id)
        if not user_data:
                user_data = storage.register_user(user_id, message.from_user.username)
        
        # Calculate days in bot
        first_seen = datetime.strptime(user_data["first_seen"], "%Y-%m-%dT%H:%M:%S")
        days_in_bot = (datetime.utcnow() - first_seen).days
        
        # Get bot info for referral link
        bot = await message.bot.me()
        bot_username = bot.username
        ref_link = f"https://t.me/{bot_username}?start={user_id}"
        
        profile_text = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
                f"üìù Username: @{username}\n"
                f"üÜî ID: {user_id}\n"
                f"üìÖ –î–Ω–µ–π –≤ –±–æ—Ç–µ: {days_in_bot}\n"
                f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}"
        )
        
        await message.answer(profile_text, reply_markup=profile_keyboard())


@router.callback_query(F.data == "my_rentals")
async def my_rentals_callback(callback: CallbackQuery):
        rentals = storage.list_rentals(callback.from_user.id)
        if not rentals:
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥", show_alert=True)
                return
        
        lines = ["üìã –í–∞—à–∏ –∞—Ä–µ–Ω–¥—ã:\n"]
        for r in rentals:
                lines.append(f"‚Ä¢ {r['number']} ‚Äî –¥–æ {_format_until(r['until'])}")
        lines.append("\nüí° –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å: /extend <–Ω–æ–º–µ—Ä> <–º–µ—Å—è—Ü–µ–≤>")
        
        await callback.message.edit_text("\n".join(lines))
        await callback.answer()


@router.message(Command("extend"))
async def extend_cmd(message: Message):
        # Format: /extend <number> <months>
        parts = message.text.strip().split()
        if len(parts) < 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /extend <–Ω–æ–º–µ—Ä> <–º–µ—Å—è—Ü–µ–≤>")
                return
        number = " ".join(parts[1:-1])
        try:
                months = int(parts[-1])
        except ValueError:
                await message.answer("–ú–µ—Å—è—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º (1/3/6/12)")
                return
        updated = storage.extend_rental(message.from_user.id, number, months)
        if not updated:
                await message.answer("–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
                return
        await message.answer(f"–ü—Ä–æ–¥–ª–µ–Ω–æ –¥–æ {_format_until(updated['until'])}.")


@router.message(Command("admin_rent"))
async def admin_rent_cmd(message: Message):
        if message.from_user.id != ADMIN_ID:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
                return
        parts = message.text.strip().split()
        if len(parts) < 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_rent <–Ω–æ–º–µ—Ä> <–º–µ—Å—è—Ü–µ–≤>")
                return
        number = " ".join(parts[1:-1])
        try:
                months = int(parts[-1])
        except ValueError:
                await message.answer("–ú–µ—Å—è—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
        rental = storage.force_rental(message.from_user.id, number, months)
        if not rental:
                await message.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
        await message.answer(f"–û—Ñ–æ—Ä–º–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º. –ê—Ä–µ–Ω–¥–∞ {number} –¥–æ {_format_until(rental['until'])}.")


@router.message(Command("promo_add"))
async def promo_add_cmd(message: Message):
        if message.from_user.id != ADMIN_ID:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
                return
        parts = message.text.strip().split()
        if len(parts) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_add <–ö–û–î> <–ü–†–û–¶–ï–ù–¢>\n–ü—Ä–∏–º–µ—Ä: /promo_add SALE20 20")
                return
        code = parts[1]
        try:
                percent = int(parts[2])
        except ValueError:
                await message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 100.")
                return
        
        promo = storage.add_promocode(code, percent, message.from_user.id)
        if not promo:
                await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ (1-100).")
                return
        
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω:\n–ö–æ–¥: {promo['code']}\n–°–∫–∏–¥–∫–∞: {promo['percent']}%")


@router.message(Command("promo_list"))
async def promo_list_cmd(message: Message):
        if message.from_user.id != ADMIN_ID:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
                return
        
        promos = storage.list_promocodes()
        if not promos:
                await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
        
        lines = ["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:"]
        for p in promos:
                status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if p.get("active", True) else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω"
                lines.append(f"\n‚Ä¢ {p['code']} ‚Äî {p['percent']}% ({status})")
        
        await message.answer("\n".join(lines))


@router.message(Command("promo_disable"))
async def promo_disable_cmd(message: Message):
        if message.from_user.id != ADMIN_ID:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
                return
        parts = message.text.strip().split()
        if len(parts) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_disable <–ö–û–î>")
                return
        
        code = parts[1]
        if storage.deactivate_promocode(code):
                await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code.upper()} –æ—Ç–∫–ª—é—á–µ–Ω.")
        else:
                await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {code.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def expiry_worker():
        while True:
                try:
                        released = storage.release_if_expired()
                        # Optionally, could log released count
                except Exception:
                        pass
                await asyncio.sleep(60)


async def main():
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher()
        dp.include_router(router)
        asyncio.create_task(expiry_worker())
        # Drop pending updates to avoid conflicts with other instances
        await dp.start_polling(bot, drop_pending_updates=True)


if __name__ == "__main__":
        asyncio.run(main())
